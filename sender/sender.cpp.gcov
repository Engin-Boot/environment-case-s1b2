        -:    0:Source:sender.cpp
        -:    0:Graph:sender.gcno
        -:    0:Data:sender.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <iostream>
        -:    2:#include <fstream>
        -:    3:#include <vector>
        -:    4:#include <string>
        -:    5:#include<sstream>
        -:    6:#include<exception>
        -:    7:#include <algorithm>
        -:    8:#include "sender.h"
        -:    9:#include<chrono>
        -:   10:#include<stdexcept>
        -:   11:#include<thread>
        -:   12:#include<cmath>
        -:   13:using namespace std;
        -:   14:
function _ZN9CSVReader12readAndParseEv called 1 returned 100% blocks executed 68%
        1:   15:vector<vector <string> > CSVReader::readAndParse()
        1:   15-block  0
unconditional  0 taken 1
        -:   16:{
        1:   17:    fstream file;
        1:   18:    vector<vector <string> > dataList;
        1:   19:    string line ="";
        1:   19-block  0
branch  0 taken 1
branch  1 taken 0
        1:   20:    string data ="";
        1:   20-block  0
branch  0 taken 1
branch  1 taken 0
        1:   21:    file.open(fileName);
        1:   21-block  0
branch  0 taken 1
branch  1 taken 0
        -:   22:     /*try{ if (!file) 
        -:   23:        {
        -:   24:            throw runtime_error("Could not open file");
        -:   25:        }
        -:   26:     }*/
        -:   27:   
        -:   28: 
        -:   29:   /* catch (std::exception &ex)
        -:   30:    {
        -:   31:       cout<<ex.what()<<endl;
        -:   32:       exit(0);
        -:   33:    }*/
        -:   34:    
        -:   35:    
        7:   36:     while (getline(file, line))
        1:   36-block  0
unconditional  0 taken 1
        7:   36-block  1
branch  1 taken 7
branch  2 taken 0
        7:   36-block  2
branch  3 taken 7
branch  4 taken 0
        7:   36-block  3
branch  5 taken 6
branch  6 taken 1
        6:   36-block  4
unconditional  7 taken 6
        -:   37:    {
        6:   38:       stringstream str(line);
        6:   38-block  0
branch  0 taken 6
branch  1 taken 0
        6:   39:       vector<string> rowData;
       18:   40:        while (getline(str, data, ','))
        6:   40-block  0
unconditional  0 taken 6
       18:   40-block  1
branch  1 taken 18
branch  2 taken 0
       18:   40-block  2
branch  3 taken 18
branch  4 taken 0
       18:   40-block  3
branch  5 taken 12
branch  6 taken 6
       12:   40-block  4
unconditional  7 taken 12
        -:   41:        {
       12:   42:            rowData.push_back(data);
       12:   42-block  0
branch  0 taken 12
branch  1 taken 0
        -:   43:        }
        6:   44:        dataList.push_back(rowData);
        6:   44-block  0
branch  0 taken 0
branch  1 taken 6
        -:   45:
        6:   46:    }
    $$$$$:   46-block  0
unconditional  0 never executed
        -:   47:
        1:   48:    file.close();
        1:   48-block  0
branch  0 taken 0
branch  1 taken 1
        -:   49:   
        1:   50:   return dataList;
        1:   51:}
    $$$$$:   51-block  0
unconditional  0 never executed
    $$$$$:   51-block  1
unconditional  1 never executed
    $$$$$:   51-block  2
unconditional  2 never executed
        1:   51-block  3
branch  3 taken 0
branch  4 taken 1
    $$$$$:   51-block  4
unconditional  5 never executed
    $$$$$:   51-block  5
unconditional  6 never executed
    $$$$$:   51-block  6
unconditional  7 never executed
        1:   51-block  7
unconditional  8 taken 1
    $$$$$:   51-block  8
unconditional  9 never executed
    $$$$$:   51-block  9
function _Z24FirstIsASpecialCharacterRNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE called 9 returned 100% blocks executed 100%
        9:   52:bool FirstIsASpecialCharacter(string& s)
        9:   52-block  0
unconditional  0 taken 9
        -:   53:{
        9:   54:    if(isdigit(s[0]))
        9:   54-block  0
branch  0 taken 7
branch  1 taken 2
        -:   55:    {
        7:   56:        return false;
        7:   56-block  0
unconditional  0 taken 7
        -:   57:    }
        2:   58:    return true;
        2:   58-block  0
unconditional  0 taken 2
        9:   59:}
        9:   59-block  0
unconditional  0 taken 9
function _Z19stringIsNotAIntegerRNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE called 7 returned 100% blocks executed 100%
        7:   60:bool stringIsNotAInteger(string& s)
        7:   60-block  0
unconditional  0 taken 7
        -:   61:{
       21:   62:    for (unsigned int i=0;i<s.size();i++)
        7:   62-block  0
unconditional  0 taken 7
       21:   62-block  1
branch  1 taken 15
branch  2 taken 6
       14:   62-block  2
unconditional  3 taken 14
        -:   63:    {
       15:   64:        if (!isdigit(s[i]))
       15:   64-block  0
branch  0 taken 1
branch  1 taken 14
        -:   65:         {
        1:   66:             return true;
        1:   66-block  0
unconditional  0 taken 1
        -:   67:         }
        -:   68:
       14:   69:    }
       14:   69-block  0
unconditional  0 taken 14
        6:   70:    return false;
        6:   70-block  0
unconditional  0 taken 6
        7:   71:}
        7:   71-block  0
unconditional  0 taken 7
function _Z10IsaIntegerRNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE called 9 returned 100% blocks executed 100%
        9:   72:bool IsaInteger(string & columnData )
        9:   72-block  0
unconditional  0 taken 9
        -:   73:{
        -:   74:   
        9:   75:    if(FirstIsASpecialCharacter(columnData))
        9:   75-block  0
branch  0 taken 2
branch  1 taken 7
        -:   76:    {
        2:   77:        return false;
        2:   77-block  0
unconditional  0 taken 2
        -:   78:    }
        7:   79:   else if (stringIsNotAInteger(columnData))
        7:   79-block  0
branch  0 taken 1
branch  1 taken 6
        -:   80:   {
        1:   81:       return false;
        1:   81-block  0
unconditional  0 taken 1
        -:   82:   }
        6:   83:    return true;
        6:   83-block  0
unconditional  0 taken 6
        9:   84:}
        9:   84-block  0
unconditional  0 taken 9
function _Z17modifyInvalidDataRNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEE called 6 returned 100% blocks executed 71%
        6:   85:vector<string> modifyInvalidData(vector<string>& data )
        6:   85-block  0
unconditional  0 taken 6
        -:   86:{
        6:   87:    vector<string> rowVector;
        6:   88:    if (IsaInteger(data[0])==true &&IsaInteger(data[1])==true)
        6:   88-block  0
branch  0 taken 6
branch  1 taken 0
        6:   88-block  1
branch  2 taken 3
branch  3 taken 3
        3:   88-block  2
branch  4 taken 3
branch  5 taken 0
        3:   88-block  3
branch  6 taken 3
branch  7 taken 0
        -:   89:    {
        3:   90:        rowVector.push_back(data[0]);
        3:   90-block  0
branch  0 taken 3
branch  1 taken 0
        3:   91:        rowVector.push_back(data[1]);
        3:   91-block  0
branch  0 taken 3
branch  1 taken 0
        3:   92:    }
        3:   92-block  0
unconditional  0 taken 3
        -:   93:    else
        -:   94:    {
        3:   95:        rowVector.push_back("Invalid");
        3:   95-block  0
branch  0 taken 0
branch  1 taken 3
        3:   95-block  1
branch  2 taken 3
branch  3 taken 0
    $$$$$:   95-block  2
unconditional  4 never executed
        3:   96:        rowVector.push_back("Invalid");
        3:   96-block  0
branch  0 taken 0
branch  1 taken 3
        3:   96-block  1
branch  2 taken 3
branch  3 taken 0
        3:   96-block  2
unconditional  4 taken 3
    $$$$$:   96-block  3
unconditional  5 never executed
        -:   97:    }
        -:   98:    
        6:   99:   return rowVector;
        6:  100:}
    $$$$$:  100-block  0
unconditional  0 never executed
        6:  100-block  1
branch  1 taken 0
branch  2 taken 6
    $$$$$:  100-block  2
unconditional  3 never executed
        6:  100-block  3
unconditional  4 taken 6
    $$$$$:  100-block  4
unconditional  5 never executed
    $$$$$:  100-block  5
        -:  101:
function _Z21processInvalidEntriesRKNSt3__16vectorINS0_INS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEENS4_IS8_EEEE called 1 returned 100% blocks executed 52%
        1:  102:vector<vector <string> >processInvalidEntries(const vector<vector <string> >& fetchedData)
        1:  102-block  0
unconditional  0 taken 1
        -:  103:{
        1:  104:    vector<vector <string> > processedEntries;
        7:  105:    for  (vector<string> getRow:fetchedData)
        1:  105-block  0
unconditional  0 taken 1
        7:  105-block  1
branch  1 taken 6
branch  2 taken 1
        6:  105-block  2
branch  3 taken 6
branch  4 taken 0
        6:  105-block  3
unconditional  5 taken 6
        6:  105-block  4
unconditional  6 taken 6
        -:  106:    {
        -:  107:        
        6:  108:         vector<string> rowData = modifyInvalidData(getRow);
        6:  108-block  0
branch  0 taken 6
branch  1 taken 0
        6:  109:         if (rowData.size()==2)
        6:  109-block  0
branch  0 taken 6
branch  1 taken 0
        -:  110:         {
        6:  111:              processedEntries.push_back(rowData);
        6:  111-block  0
branch  0 taken 6
branch  1 taken 0
        6:  112:         }
        6:  112-block  0
unconditional  0 taken 6
        -:  113:         else
        -:  114:         {
    #####:  115:             cout<<"Data Missing"<<endl;
    $$$$$:  115-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  115-block  1
branch  2 never executed
branch  3 never executed
    #####:  116:             exit(0);
    $$$$$:  116-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  116-block  1
        -:  117:         }
        -:  118:         
        6:  119:    }
    $$$$$:  119-block  0
unconditional  0 never executed
    $$$$$:  119-block  1
unconditional  1 never executed
        1:  120:    return processedEntries;
        1:  121:}
    $$$$$:  121-block  0
unconditional  0 never executed
    $$$$$:  121-block  1
unconditional  1 never executed
        1:  121-block  2
branch  2 taken 0
branch  3 taken 1
    $$$$$:  121-block  3
unconditional  4 never executed
        1:  121-block  4
unconditional  5 taken 1
    $$$$$:  121-block  5
unconditional  6 never executed
    $$$$$:  121-block  6
function _Z36checkProcessedRowDataIsAInvalidEntryRKNSt3__16vectorINS0_INS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEENS4_IS8_EEEEi called 6 returned 100% blocks executed 100%
        6:  122:bool checkProcessedRowDataIsAInvalidEntry (const vector<vector <string> >& row,int i)
        6:  122-block  0
unconditional  0 taken 6
        -:  123:{
        6:  124:    if(row[i][0]=="Invalid"&&row[i][1]=="Invalid")
        6:  124-block  0
branch  0 taken 3
branch  1 taken 3
        3:  124-block  1
branch  2 taken 3
branch  3 taken 0
        -:  125:    {
        3:  126:        return true;
        3:  126-block  0
unconditional  0 taken 3
        -:  127:    }
        3:  128:    return false;
        3:  128-block  0
unconditional  0 taken 3
        6:  129:}
        6:  129-block  0
unconditional  0 taken 6
function _Z18printProcessedDataRNSt3__16vectorINS0_INS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEENS4_IS8_EEEE called 1 returned 100% blocks executed 100%
        1:  130:void printProcessedData(vector<vector <string> >& processedData)
        1:  130-block  0
unconditional  0 taken 1
        -:  131:{
        7:  132:    for (unsigned int i=0;i<processedData.size();i++)
        1:  132-block  0
unconditional  0 taken 1
        7:  132-block  1
branch  1 taken 6
branch  2 taken 1
        6:  132-block  2
unconditional  3 taken 6
        -:  133:    {
        -:  134:        
        6:  135:           if (checkProcessedRowDataIsAInvalidEntry(processedData,i))
        6:  135-block  0
branch  0 taken 3
branch  1 taken 3
        -:  136:           {
        3:  137:                this_thread::sleep_for(chrono::seconds(10) );
        3:  138:           }
        3:  138-block  0
unconditional  0 taken 3
        -:  139:           else
        -:  140:           {
        3:  141:               cout<<processedData[i][0]<<" "<<processedData[i][1]<<endl;
        3:  141-block  0
unconditional  0 taken 3
        -:  142:           }
        -:  143:           
        -:  144:         /* for(int j=0;j<processedData[i].size();j++)
        -:  145:          {
        -:  146:              cout<<processedData[i][j]<<",";
        -:  147:          }*/
        6:  148:    this_thread::sleep_for(chrono::seconds(5) );
        6:  149:    }
        6:  149-block  0
unconditional  0 taken 6
        1:  150:}
        1:  150-block  0
unconditional  0 taken 1
function _Z8readDataRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE called 1 returned 100% blocks executed 55%
        1:  151:vector<vector <string> > readData(const string& filename)
        1:  151-block  0
unconditional  0 taken 1
        -:  152:{
        1:  153:     CSVReader reader(filename,",");
        1:  153-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$:  153-block  1
unconditional  2 never executed
    $$$$$:  153-block  2
        1:  154:     vector<vector <string> > fetchedData = reader.readAndParse();
        1:  154-block  0
branch  0 taken 1
branch  1 taken 0
        -:  155:     //vector<vector <string> > processedData = processInvalidEntries(fetchedData);
        -:  156:     //printProcessedData(processedData);
        1:  157:    return fetchedData;
        1:  158:}
        1:  158-block  0
branch  0 taken 0
branch  1 taken 1
    $$$$$:  158-block  1
unconditional  2 never executed
    $$$$$:  158-block  2
unconditional  3 never executed
        1:  158-block  3
unconditional  4 taken 1
        -:  159:
function main called 1 returned 100% blocks executed 50%
        1:  160:int main()
        1:  160-block  0
unconditional  0 taken 1
        -:  161:{
        1:  162:  vector<vector<string>>fetchedData=readData("data.csv");
        1:  162-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$:  162-block  1
unconditional  2 never executed
    $$$$$:  162-block  2
        1:  163:  vector<vector<string>> processedData = processInvalidEntries(fetchedData);
        1:  163-block  0
branch  0 taken 1
branch  1 taken 0
        1:  164:  printProcessedData(processedData);
        1:  164-block  0
branch  0 taken 1
branch  1 taken 0
        1:  165:   return 0;
        1:  166:}
        1:  166-block  0
unconditional  0 taken 1
    $$$$$:  166-block  1
unconditional  1 never executed
    $$$$$:  166-block  2
unconditional  2 never executed
    $$$$$:  166-block  3
unconditional  3 never executed
